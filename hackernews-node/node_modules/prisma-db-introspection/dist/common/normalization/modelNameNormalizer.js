"use strict";
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
var pluralize_1 = require("pluralize");
var prisma_datamodel_1 = require("prisma-datamodel");
var uppercamelcase = require("uppercamelcase");
var lodash_1 = require("lodash");
var ModelNameNormalizer = /** @class */ (function () {
    function ModelNameNormalizer() {
    }
    ModelNameNormalizer.prototype.normalize = function (model) {
        var e_1, _a;
        try {
            // We need to sort types according to topological order for name normalization.
            // Otherwise embedded type naming might break as embedded types depend on
            // their parent type.
            for (var _b = __values(prisma_datamodel_1.toposort(model.types)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var type = _c.value;
                this.normalizeType(type, model);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        this.fixConflicts(model);
    };
    ModelNameNormalizer.prototype.assignName = function (obj, newName) {
        if (obj.databaseName === null) {
            // If name was already changed, we don't touch it.
            if (newName !== obj.name) {
                // If name is already conforming to prisma, skip.
                obj.databaseName = obj.name;
                obj.name = newName;
            }
        }
    };
    ModelNameNormalizer.prototype.getNormalizedName = function (name, model) {
        if (name.toUpperCase() === name) {
            return name;
        }
        var normalizedName = uppercamelcase(pluralize_1.singular(name));
        // if there is a naming conflict with a known scalar type, use the default name
        if (prisma_datamodel_1.isTypeIdentifier(normalizedName) || prisma_datamodel_1.isTypeIdentifier(pluralize_1.singular(name))) {
            return name;
        }
        // if there is already a table in the database with the exact name we're generating - let's just not do it
        if (model.types.some(function (t) { return (t.databaseName || t.name) === normalizedName; })) {
            return name;
        }
        return normalizedName;
    };
    ModelNameNormalizer.prototype.normalizeType = function (type, model, forceNoRename) {
        if (forceNoRename === void 0) { forceNoRename = false; }
        var e_2, _a;
        if (!forceNoRename) {
            this.assignName(type, this.getNormalizedName(type.name, model));
        }
        try {
            for (var _b = __values(type.fields), _c = _b.next(); !_c.done; _c = _b.next()) {
                var field = _c.value;
                this.normalizeField(field, type, model);
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_2) throw e_2.error; }
        }
    };
    ModelNameNormalizer.prototype.fixConflicts = function (model) {
        var e_3, _a, e_4, _b, e_5, _c;
        var groupedTypesByName = lodash_1.groupBy(model.types, function (t) { return t.name; });
        try {
            for (var _d = __values(Object.values(groupedTypesByName)), _e = _d.next(); !_e.done; _e = _d.next()) {
                var types = _e.value;
                if (types.length > 1) {
                    try {
                        for (var types_1 = __values(types), types_1_1 = types_1.next(); !types_1_1.done; types_1_1 = types_1.next()) {
                            var type = types_1_1.value;
                            if (type.databaseName) {
                                type.name = uppercamelcase(type.databaseName);
                            }
                        }
                    }
                    catch (e_4_1) { e_4 = { error: e_4_1 }; }
                    finally {
                        try {
                            if (types_1_1 && !types_1_1.done && (_b = types_1.return)) _b.call(types_1);
                        }
                        finally { if (e_4) throw e_4.error; }
                    }
                    var uniqueTypes = lodash_1.uniqBy(types, function (t) { return t.name; });
                    // if there still are duplicates, default to the database name
                    if (uniqueTypes.length < types.length) {
                        try {
                            for (var types_2 = __values(types), types_2_1 = types_2.next(); !types_2_1.done; types_2_1 = types_2.next()) {
                                var type = types_2_1.value;
                                if (type.databaseName) {
                                    type.name = type.databaseName;
                                    type.databaseName = null;
                                }
                            }
                        }
                        catch (e_5_1) { e_5 = { error: e_5_1 }; }
                        finally {
                            try {
                                if (types_2_1 && !types_2_1.done && (_c = types_2.return)) _c.call(types_2);
                            }
                            finally { if (e_5) throw e_5.error; }
                        }
                    }
                }
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (_e && !_e.done && (_a = _d.return)) _a.call(_d);
            }
            finally { if (e_3) throw e_3.error; }
        }
    };
    ModelNameNormalizer.prototype.normalizeField = function (field, parentType, parentModel) {
        // Make embedded type names pretty
        if (typeof field.type !== 'string' && field.type.isEmbedded) {
            if (!field.type.databaseName)
                field.type.databaseName = field.type.name;
            field.type.name = parentType.name + prisma_datamodel_1.capitalize(pluralize_1.singular(field.name));
        }
    };
    return ModelNameNormalizer;
}());
exports.default = ModelNameNormalizer;
//# sourceMappingURL=modelNameNormalizer.js.map